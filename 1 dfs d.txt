#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

void parallelDFS(const std::vector<std::vector<int> >& graph, int startVertex, std::vector<bool>& visited) {
    std::stack<int> dfsStack;
    dfsStack.push(startVertex);
    
    while (!dfsStack.empty()) {
        int currentVertex = dfsStack.top();
        dfsStack.pop();
        
        if (!visited[currentVertex]) {
            std::cout << "Visiting vertex: " << currentVertex << std::endl;
            visited[currentVertex] = true;
            
            #pragma omp parallel for num_threads(4)
            for (int i = 0; i < graph[currentVertex].size(); ++i) {
                int neighborVertex = graph[currentVertex][i];
                if (!visited[neighborVertex]) {
                    #pragma omp critical
                    dfsStack.push(neighborVertex);
                }
            }
        }
    }
}

int main() {
    int numVertices;
    std::cout << "Enter the number of vertices: ";
    std::cin >> numVertices;
    
    std::vector<std::vector<int> > graph(numVertices);
     
    std::cout << "Enter the adjacency list for each vertex:\n";
    for (int i = 0; i < numVertices; ++i) {
        int numNeighbors;
        std::cout << "Enter the number of neighbors for vertex " << i << ": ";
        std::cin >> numNeighbors;
        
        std::cout << "Enter the neighbors for vertex " << i << ": ";
        for (int j = 0; j < numNeighbors; ++j) {
            int neighborVertex;
            std::cin >> neighborVertex;
            graph[i].push_back(neighborVertex);
        }
    }
    
    int startVertex;
    std::cout << "Enter the start vertex: ";
    std::cin >> startVertex;
    
    std::vector<bool> visited(numVertices, false);
    
    #pragma omp parallel
    {
        #pragma omp single
        {
            parallelDFS(graph, startVertex, visited);
        }
    }
    
    return 0;
}





The provided code is an implementation of depth-first search (DFS) using OpenMP for parallelization. Let's go through the code step by step:

The code includes several header files: <iostream>, <vector>, <stack>, and <omp.h>. These are standard C++ libraries used for input/output, working with vectors and stacks, and OpenMP parallelization, respectively.

The parallelDFS function performs the depth-first search traversal of the graph starting from a given vertex (startVertex). It takes the graph represented as an adjacency list (graph), a vector of boolean values indicating the visited status of each vertex (visited), as input.

Inside the parallelDFS function, a stack (dfsStack) is created to store the vertices to visit. The startVertex is pushed onto the stack to initiate the traversal.

The while loop continues until the stack becomes empty. In each iteration, the top element (currentVertex) is removed from the stack.

If the current vertex has not been visited (!visited[currentVertex]), it is marked as visited (visited[currentVertex] = true) and printed.

The #pragma omp parallel for directive is used to parallelize the loop that iterates over the neighbors of the current vertex. OpenMP is a directive-based API for parallel programming in C/C++, and the parallel for directive distributes the iterations of the loop among multiple threads for concurrent execution. The num_threads(4) clause specifies that the loop should be executed by four threads.

Inside the parallel loop, if a neighbor vertex (neighborVertex) has not been visited, a critical section (#pragma omp critical) is used to ensure that only one thread modifies the stack at a time. The neighbor vertex is pushed onto the stack (dfsStack.push(neighborVertex)).

In the main function, the number of vertices in the graph (numVertices) is obtained from the user.

A 2D vector (graph) is created to represent the graph using an adjacency list. Each vertex has a vector that stores its neighboring vertices.

The user is prompted to enter the adjacency list for each vertex. The number of neighbors for each vertex is obtained, followed by the actual neighbor vertices.

The start vertex is obtained from the user.

A vector of boolean values (visited) is created to track the visited status of each vertex, initialized to false.

The #pragma omp parallel directive is used to parallelize the execution of the parallelDFS function. Within the parallel region, the #pragma omp single directive ensures that the parallelDFS function is executed by only one thread.

Finally, the program terminates with a return value of 0.

The code uses OpenMP to parallelize the process of exploring the neighbors of each vertex during the DFS traversal. By leveraging multiple threads, it can potentially speed up the traversal on systems with multiple CPU cores. However, it's important to note that parallelizing a DFS algorithm can introduce additional complexities, such as synchronization and potential data races. The critical section (#pragma omp critical) is used to ensure that the stack operations are performed in a thread-safe manner.
