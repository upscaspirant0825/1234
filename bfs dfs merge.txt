// bfs

#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

struct Node {
  int id;
  vector<int> neighbors;
  bool visited;

  Node(int id) {
    this->id = id;
    visited = false;
  }
};

void bfs(vector<Node> &nodes, int start) {
  queue<int> queue;
  queue.push(start);

  while (!queue.empty()) {
    int current = queue.front();
    queue.pop();

    cout << current << " ";

    #pragma omp parallel for
    for (int neighbor : nodes[current].neighbors) {
      if (!nodes[neighbor].visited) {
        nodes[neighbor].visited = true;
        queue.push(neighbor);
      }
    }
  }
}

int main() {
  int n;
  cout << "Enter the number of nodes: ";
  cin >> n;

  vector<Node> nodes;

  for (int i = 0; i < n; i++) {
    nodes.push_back(Node(i));
  }

  for (int i = 0; i < n; i++) {
    int num_neighbors;
    cout << "Enter the number of neighbors for node " << i + 1 << ": ";
    cin >> num_neighbors;

    for (int j = 0; j < num_neighbors; j++) {
      int neighbor;
      cout << "Enter the neighbor " << j + 1 << " for node " << i + 1 << ": ";
      cin >> neighbor;

      nodes[i].neighbors.push_back(neighbor);
    }
  }

  nodes[0].visited = true;

  bfs(nodes, 0);

  cout << endl;

  return 0;
}


// dfs

#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

void parallelDFS(const std::vector<std::vector<int> >& graph, int startVertex, std::vector<bool>& visited) {
    std::stack<int> dfsStack;
    dfsStack.push(startVertex);
    
    while (!dfsStack.empty()) {
        int currentVertex = dfsStack.top();
        dfsStack.pop();
        
        if (!visited[currentVertex]) {
            std::cout << "Visiting vertex: " << currentVertex << std::endl;
            visited[currentVertex] = true;
            
            #pragma omp parallel for num_threads(4)
            for (int i = 0; i < graph[currentVertex].size(); ++i) {
                int neighborVertex = graph[currentVertex][i];
                if (!visited[neighborVertex]) {
                    #pragma omp critical
                    dfsStack.push(neighborVertex);
                }
            }
        }
    }
}

int main() {
    int numVertices;
    std::cout << "Enter the number of vertices: ";
    std::cin >> numVertices;
    
    std::vector<std::vector<int> > graph(numVertices);
     
    std::cout << "Enter the adjacency list for each vertex:\n";
    for (int i = 0; i < numVertices; ++i) {
        int numNeighbors;
        std::cout << "Enter the number of neighbors for vertex " << i << ": ";
        std::cin >> numNeighbors;
        
        std::cout << "Enter the neighbors for vertex " << i << ": ";
        for (int j = 0; j < numNeighbors; ++j) {
            int neighborVertex;
            std::cin >> neighborVertex;
            graph[i].push_back(neighborVertex);
        }
    }
    
    int startVertex;
    std::cout << "Enter the start vertex: ";
    std::cin >> startVertex;
    
    std::vector<bool> visited(numVertices, false);
    
    #pragma omp parallel
    {
        #pragma omp single
        {
            parallelDFS(graph, startVertex, visited);
        }
    }
    
    return 0;
}

