#1 
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
import numpy as np

#2
(x_train, y_train), (x_test, y_test) = keras.datasets.fashion_mnist.load_data()

#3
plt.imshow(x_train[1])

#4
plt.imshow(x_train[0])

#5
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

#6
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

#7
x_train.shape

#8
x_test.shape

#9
y_train.shape

#10
y_test.shape

#11
model = keras.Sequential([
    keras.layers.Conv2D(32, (3,3), activation="relu", input_shape=(28,28,1)),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Dropout(0.25),
    keras.layers.Conv2D(64, (3,3), activation="relu"),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Dropout(0.25),
    keras.layers.Conv2D(128, (3,3), activation="relu"),
    keras.layers.Flatten(),
    keras.layers.Dense(10, activation="softmax")
])

#12
model.summary()

#13
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=['accuracy'])
history = model.fit(x_train, y_train, epochs = 10, validation_data = (x_test, y_test))

#14
test_loss, test_acc = model.evaluate(x_test, y_test)

#15
print("Test accuracy:", test_acc)









The provided code is a basic implementation of a Convolutional Neural Network (CNN) using TensorFlow and Keras to classify fashion images from the Fashion MNIST dataset. Here's an explanation of each step:

Importing the necessary libraries: TensorFlow, Matplotlib, and Keras.
Loading the Fashion MNIST dataset, which consists of 60,000 training images and 10,000 test images of 10 different fashion categories.
Displaying an image from the training set using Matplotlib.
Displaying another image from the training set.
Normalizing the pixel values of the images by dividing them by 255.0 to scale them between 0 and 1.
Reshaping the images to have a single color channel (grayscale) and the dimensions (28, 28, 1) to fit the CNN input requirements.
Printing the shape of the training images (x_train), which should be (60000, 28, 28, 1) after the reshaping.
Printing the shape of the test images (x_test), which should be (10000, 28, 28, 1) after the reshaping.
Printing the shape of the training labels (y_train), which should be (60000,) representing the labels for the corresponding training images.
Printing the shape of the test labels (y_test), which should be (10000,) representing the labels for the corresponding test images.
Defining the model architecture using the Sequential API. It consists of multiple convolutional layers with ReLU activation, max pooling layers, dropout layers for regularization, and a fully connected (dense) layer with softmax activation for classification.
Printing a summary of the model, displaying the layers and the number of trainable parameters.
Compiling the model by specifying the optimizer (Adam), loss function (sparse categorical cross-entropy), and metrics (accuracy). Then, training the model on the training data for 10 epochs with validation data provided.
Evaluating the trained model on the test data to compute the test loss and accuracy.
Printing the test accuracy obtained from the evaluation.
The overall code performs the following tasks: loading and preprocessing the data, defining the model architecture, training the model, evaluating its performance on the test set, and printing the test accuracy achieved.